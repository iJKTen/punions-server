service: punions-server
# app and org for use with dashboard.serverless.com
app: punions-server
org: ijkten

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  environment:
    DYNAMODB_CARDS_TABLE: ${self:custom.dynamodb.cardsTable}
    DYNAMODB_GAMES_TABLE: ${self:custom.dynamodb.gamesTable}

  websocketsApiName: punions-websocket-${self:provider.stage}
  websocketApiRouteSelectionExpression: $request.body.action

  iamRoleStatements:
  - Effect: "Allow"
    Action:
      - dynamodb:DescribeTable
      - dynamodb:Query
      - dynamodb:Scan
      - dynamodb:GetItem
      - dynamodb:PutItem
      - dynamodb:UpdateItem
      - dynamodb:DeleteItem
    Resource:
      - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.dynamodb.cardsTable}
      - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.dynamodb.cardsTable}/index/pk
      - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.dynamodb.gamesTable}
      - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.dynamodb.gamesTable}/index/pk

      # Websocket API deploy does not work here but leaving it in here for now if I can figure out how to do it later.
functions:
  game:
    handler: src/functions/game.createGame
    events:
      - http:
          method: post
          cors: true
          path: /v1/game/create
  connectionManager:
    handler: src/functions/websocket.connectionManager
    events:
      - websocket:
        routeKey: $connect
      - websocket:
        routeKey: $default
  playerLeftGame:
    handler: src/functions/game.playerLeftGame
    events:
      - websocket:
        routeKey: $disconnect
  sendMessage:
    handler: src/functions/game.sendMessage
    events:
      - websocket:
        routeKey: sendMessage
  addPlayerToGame:
    handler: src/functions/game.addPlayerToGame
    events:
      - websocket:
        routeKey: addPlayerToGame
  playerPlayedCard:
    handler: src/functions/game.playerPlayedCard
    events:
      - websocket:
        routeKey: playerPlayedCard
  scorePun:
    handler: src/functions/game.scorePun
    events:
      - websocket:
        routeKey: scorePun

plugins:
  - serverless-pseudo-parameters
  - serverless-websockets-plugin

# Setup your dynamodb table
custom:
  dynamodb:
    cardsTable: ${self:service}-cards-${self:provider.stage}
    gamesTable: ${self:service}-games-${self:provider.stage}

resources:
  Resources:
    cardsTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.dynamodb.cardsTable}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    gamesTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.dynamodb.gamesTable}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

